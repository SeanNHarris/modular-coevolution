from modularcoevolution.evolution.agenttyperegistry import AgentTypeRegistry

import abc


# The superclass of both attacker and defender agents generated by the attacker and defender generators.
# All agents must implement either BaseAttacker or BaseDefender, as well as the abstract methods here.
class BaseAgent(metaclass=AgentTypeRegistry):
    # A class can have an agent type name that will be used by default as a key for logging.
    # Alternatively, agent type names can be set per instance as an argument to __init__, which overrides this value.
    agent_type_name = "no agent type name"

    # Return a dictionary of parameters which could be passed to apply_parameters
    @abc.abstractmethod
    def get_parameters(self):
        pass

    @abc.abstractmethod
    def apply_parameters(self, parameters):
        pass

    # Return a string which displays relevant parameters to the agent for logging purposes,
    # such that the agent can be reconstructed later. For example, a genome.
    # Defaults to the parameter dictionary's string representation
    def parameter_string(self):
        return repr(self.get_parameters())

    # Request that the agent "perform an action" using the given parameters.
    # This can modify the arguments, or just return an action, depending on implementation.
    @abc.abstractmethod
    def perform_action(self, *args, **kwargs):
        pass

    def __init__(self, parameters=None, active=True, *args, agent_type_name=None, **kwargs):
        self.active = active
        if agent_type_name is not None:
            self.agent_type_name = agent_type_name
        else:
            self.agent_type_name = type(self).agent_type_name

        if parameters is not None:
            self.apply_parameters(parameters)
